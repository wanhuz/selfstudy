(define (make-interval a b) 
    (if (< a b)
        (cons a b)
        (cons b a)))

(define (lower-bound x) 
    (min (car x) (cdr x)))
    
(define (upper-bound x) 
    (max (car x) (cdr x)))

(define (add-interval x y)
    (make-interval (+ (lower-bound x) (lower-bound y))
                   (+ (upper-bound x) (lower-bound y))))

(define (mul-interval x y)
    (let ((p1 (* (lower-bound x) (lower-bound y)))
          (p2 (* (lower-bound x) (upper-bound y)))
          (p3 (* (upper-bound x) (lower-bound y)))
          (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
               
(define (div-interval x y)
    (mul-interval x 
                  (make-interval (/ 1.0 (upper-bound y))
                                 (/ 1.0 (lower-bound y)))))

(define (make-center-percent c p)
    (let ((additive-tolerance (* c (/ p 100))))
        (make-interval (- c additive-tolerance) (+ c additive-tolerance))))

;Not using center and width selector to avoid div by zero
(define (percent i)
    (* 100 (/ (- (upper-bound i) (lower-bound i)) (+ (upper-bound i) (lower-bound i)))))

(define (par1 r1 r2)
    (div-interval (mul-interval r1 r2)
                  (add-interval r1 r2)))
              
(define (par2 r1 r2)
    (let ((one (make-interval 1 1)))
         (div-interval  one 
                       (add-interval (div-interval one r1)
                                     (div-interval one r2)))))

(display (par1 (make-interval 0 2) (make-interval 3 5)))
(newline)
(display (par2 (make-interval 0 2) (make-interval 3 5)))
(newline)

(display (div-interval (make-interval 0 2) (make-interval 0 2)))
(newline)
(display (div-interval (make-interval 0 2) (make-interval 1 2)))
(newline)