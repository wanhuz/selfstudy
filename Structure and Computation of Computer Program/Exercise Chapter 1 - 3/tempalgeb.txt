(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
    (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? exp num)
    (and (number? exp) (= exp num)))

(define (exponentiation? x)
    (and (pair? x) (eq? (car x) '**)))
(define (base s) (cadr s))
(define (exponent s) (caddr s))
(define (make-exponentiation base expnt)
    (cond ((=number? expnt 0) 1)
          ((=number? expnt 1) base)
          (else (list '** base expnt))))

(define (deriv exp var)
    (cond ((number? exp) 0)
          ((variable? exp)
            (if (same-variable? exp var) 1 0))
          ((sum? exp)
            (make-sum (deriv (addend exp) var)
                      (deriv (augend exp) var)))
          ((product? exp)
            (make-sum
                (make-product (multiplier exp)
                              (deriv (multiplicand exp) var))
                (make-product (deriv (multiplier exp) var)
                              (multiplicand exp))))
        
          ((exponentiation? exp)
                (make-product ;chain make-product as it can only take 2 argument
                                (make-product (exponent exp)
                                    (make-exponentiation (base exp) 
                                                         (make-sum (exponent exp) -1)))
                                (deriv (base exp) var)))
            (else 
                (error "unknown expression type -- DERIV" exp))))


(define (make-sum a1 a2)
    (define (make-sum-iter a1 rest)
        (display rest)
        (newline)

        (cond 
              ((null? rest) (cons (make-sum-iter a1 0) '()))
              ((same-variable? a1 '+) (make-sum-iter (car rest) (cddr rest)))
              ((=number? a1 0) (make-sum-iter (car rest) (cddr rest)))
              ((=number? (car rest) 0) (make-sum-iter a1 (cddr rest)))
              ((and (number? a1) (number? (car rest))) (make-sum-iter (+ a1 (car rest)) (cddr rest)))
              (else (cons a1 (cons '+ (make-sum-iter (car rest) (cddr rest)))))))  
    (make-sum-iter a1 a2))
      
(define (sum? x)
    (and (pair? x) (eq? (cadr x) '+)))
(define (addend s) (car s))
(define (augend s) 
    (let ((first (caddr s))
          (rest (caddr s)))
    (if (null? rest)
        first
        (make-sum first rest))))


(define (make-product m1 m2) 
    (define (make-product-iter m1 m2 final)
        (cond ((or (=number? m1 0) (=number? m2 0)) 0)
              ((=number? m1 1) m2)
              ((=number? m2 1) m1)
              ((and (number? m1) (number? m2)) (* m1 m2))
              (else (list m1 '* m2))))
    )
      
      
      
(define (product? x)
    (and (pair? x) (eq? (cadr x) '*)))
(define (multiplier p) (car p))
(define (multiplicand p) 
    (let ((first (caddr p))
          (rest (cddr p)))
    (if (null? rest)
        first
        (make-product (car rest) (cddr rest)))))

(define test-add '(x + y + 3 + 5 + p))
;(display (augend test-add))
(display (make-sum 'y '(3 + 5 + p)))
;(display (cons 3 (cons 4 '())))
;(display (multiplicand '(x * y * 3 * 5 * p)))

;(display (caddr '(x * y * 3)))
;(display (deriv '(x * y * 2) 'x))
;(display (deriv '(x + 3 * (x + y + 2)) 'x))
