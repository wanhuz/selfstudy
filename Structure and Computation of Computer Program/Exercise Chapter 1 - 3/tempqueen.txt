(define (even x) 
    (= (/ x 2) 0))
 
(define (smallest-divisor n)
    (find-divisor n 2))
 
(define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1)))))
      
(define (divides? a b)
    (= (remainder b a) 0))
 
(define (prime? n)
    (= n (smallest-divisor n)))


(define (accumulate op initial sequence)
    (if (null? sequence)
        initial
        (op (car sequence)
            (accumulate op initial (cdr sequence)))))
        
(define (map p sequence)
    (accumulate (lambda (x y) (cons (p x) y)) nil sequence))


(define (filter predicate sequence)
    (cond ((null? sequence) nil)
          ((predicate (car sequence))
            (cons (car sequence)
                  (filter predicate (cdr sequence))))
             (else (filter predicate (cdr sequence)))))

(define nil '())

(define (flatmap proc seq)
    (accumulate append nil (map proc seq)))

(define (prime-sum? pair)
    (prime? (+ (car pair) (cadr pair))))

(define (make-pair-sum pair)
    (list (car pair) (cadr pair) (+ (car pair) (cadr pair))))

(define (prime-sum-pairs n)
    (map make-pair-sum
         (filter prime-sum?
                 (unique-pairs n))))
            
(define (unique-pairs n)
    (flatmap
        (lambda (i)
            (map (lambda (j) (list i j))
                (enumerate-interval 1 (- i 1))))
    (enumerate-interval 1 n)))

(define (unique-triples n)
    (flatmap
        (lambda (k)
            (map (lambda (y) (cons k y))
                    (unique-pairs n)))
    (enumerate-interval 1 n)))

(define (enumerate-interval low high)
    (if (> low high)
        nil
        (cons low (enumerate-interval (+ low 1) high))))

(define (adjoin-position new-row k rest-of-queens)
        (cons (list new-row k) rest-of-queens))
    
(define empty-board nil)

(define (safe? k positions)
    #t)

(define (safes? k positions)
    (display positions)
    (cond ((= k (cadar positions)) #f)
          ((0 < (= (- k 1) (cadar positions))) #f)
          ((= (+ k 1) (cadar positions)) #f)
          (else #t)
          ))

(define (queens board-size)
    (define (queen-cols k)
        (if (= k 0)
            (list empty-board)
            (filter
                (lambda (positions) (safe? k positions))
                (flatmap
                    (lambda (rest-of-queens)
                        (map (lambda (new-row)
                                 (adjoin-position new-row k rest-of-queens))
                             (enumerate-interval 1 board-size)))
                    (queen-cols (- k 1))))))
    (queen-cols board-size))

(display (car (queens 2)))
;(display (enumerate-interval 1 3))