(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
    (list entry left right))

(define (tree-list-1 tree)
    (if (null? tree)
        '()
        (append (tree-list-1 (left-branch tree))
                (cons (entry tree)
                      (tree->list1 (right-branch tree))))))
                  
(define (tree-list-2 tree)
    (define (copy-to-list tree result-list)
        (if (null? tree)
            result-list
            (copy-to-list (left-branch tree)
                          (cons (entry tree)
                                (copy-to-list (right-branch tree) result-list)))))
    (copy-to-list tree '()))

(define (list->tree elements) ;elements is ordered list
    (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
    (if (= n 0)
        (cons '() elts)
        (let ((left-size (quotient (- n 1) 2)))
             (let ((left-result (partial-tree elts left-size)))
                  (let ((left-tree (car left-result))
                        (non-left-elts (cdr left-result))
                        (right-size (- n (+ left-size 1))))
                        (let    ((this-entry (car non-left-elts))
                                (right-result (partial-tree (cdr non-left-elts) right-size)))
                            (let    ((right-tree (car right-result))
                                    (remaining-elts (cdr right-result)))
                                    (cons (make-tree this-entry left-tree right-tree) remaining-elts))))))))

(define (adjoin-set x set)
    (cond ((null? set) (make-tree x nil nil))
          ((= x (entry set)) set)
          ((< x (entry set))
              (make-tree (entry set)
                         (adjoin-set x (left-branch set))
                         (right-branch set)))
          ((> x (entry set))
              (make-tree (entry set)
                         (left-branch set)
                         (adjoin-set x (right-branch set))))))
                                
(define nil '())
                                
(define (intersection-set set1 set2)
    (cond   ((and (null? set1) (null? set2)) (make-tree nil nil nil)) 
            ((= (car set1) (car set2)) set2)
            ((< (car set1) (car set2)) 
                (make-tree (entry set2)
                           (intersection-set (car set1) (left-branch set2))
                           (right-branch set2)))
            ((> (car set1) (car set2))
                (make-tree (entry set2)
                           (left-branch set2)
                           (intersection-set (car set1) (right-branch set2)))
          
    )))

(define (intersection-setx set1 set2)
    (define (intersection-set-iter tree1 tree2 result-list)
        (cond   ((null? tree1) result-list)
                
                (else (intersection-set-iter 
                                            (left-branch tree1) 
                                            tree2 
                                            (cons (adjoin-set (entry tree1) set2) (intersection-set-iter (right-branch tree1) tree2 result-list))))
            ))
    (intersection-set-iter set1 set2 '()))

(define (intersection-setb set1 set2)
    (if (null? set1)
        set2
        (intersection-setb (left-branch set1) )
        
    ))

;(display (length (list 1 3 5 7 9 11)))
;(display (list->tree (list 1 3 5 7 9 11)))
(display (tree-list-2 (intersection-setx (list->tree (list 1 3 5 7 9 11)) (list->tree (list 1 2 4 11 12 14)))))